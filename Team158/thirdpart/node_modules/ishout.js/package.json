{
  "name": "ishout.js",
  "author": {
    "name": "Anish Menon",
    "email": "anish@inzane.in"
  },
  "version": "0.1.4",
  "description": "Add real-time push notifications to your existing web application",
  "homepage": " https://bitbucket.org/inzane/ishout",
  "bin": {
    "ishout": "./server.js"
  },
  "engines": [
    "node >= 0.6.11"
  ],
  "keywords": [
    "server",
    "websocket",
    "realtime",
    "http",
    "socket.io"
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": " https://inzane@bitbucket.org/inzane/ishout.git"
  },
  "dependencies": {
    "optimist": "*",
    "express": "2.5.8",
    "hiredis": "*",
    "redis": "*",
    "socket.io": "*",
    "node-uuid": "*"
  },
  "devDependencies": {
    "expresso": "0.9.2",
    "socket.io-client": "0.9.6"
  },
  "scripts": {
    "start": "node server.js"
  },
  "main": "server.js",
  "directories": {
    "test": "test"
  },
  "readme": "\n# iShout.js\n\niShout.js is a Node.js + Socket.io server used for adding real-time push notifications to your existing web application.\n\n## what does that mean exactly? \n\nSay you have an awesome web app you developed in Django\\Rails\\PHP\\Perl\\Java\\Bash\\Awk.\nYou one day decide you want to add support for push (real-time) notifications.\nSure, you can run periodic AJAX calls, do long-polling, or utilize WebSockets yourself.\nBut that's a lot of work, and that's what [Socket.IO](http://socket.io/ \"Socket.IO\") is for.\n\niShout.js lets you easily integrate your existing framework with the power of socket.io.\njust install it, add the proper client for your web framework of choice (currently, it's Django only),\nand send those realtime messages from your own code, in your own language, inside your own views.\niShout.js will take care of distribution (which sockets should I send data to?) and authentication\n(how can I securely map these sockets to my users?).\n\n## Awesome, How does it work?\n\nWell, it's basically a proxy server. when your web app calls iShout.js, it does so over an internal HTTP API.\nOn the client side, your client is also connected to the iShout.js sever, using socket.io.\nSo when you, inside your webapp, send a request (lets say, send a message \"you rock!\" to user A)\nthe iShout.js API takes that request, finds the appropriate socket(s) for a client called \"A\", and emits\nthat message. that's the basic workflow.\n\n## Dependencies\n\niShout.js requires the following software installed and configured:\n\n* [Node.js](http://nodejs.org/ \"Node.js\")\n* [NPM](http://npmjs.org/ \"NPM\") (automatically installs all 3rd party libraries this project depends on.)\n* [Redis](http://redis.io/ \"Redis\") (optional, but highly recommended. see *Configuration* below).\n\n\n## Installation\n\ninstalling is pretty simple.\n\n```bash\nnpm install ishout.js\n```\n\n\n## Run the server\n\n```bash\nnode node_modules/ishout.js/server.js\n```\n\n\n## Configuration\n**changed in 0.2.3** \n\nConfiguring announce is done by providing a JSON configuration file as a command line argument.\nTo specify the path to this file, use the `--config` command line option, like so:\n\n```bash\nnode server.js --config=/path/to/settings.json\n```\n\nFor local development, the above is not required as iShout.js has some pretty sane defaults.\nin any case, these configuration parameters are supported:\n\n* `storage` - which storage backend to use. options are either `mem` or `redis`. defaults to `redis`, which also happens to be the preffered backend. the local memory backend should only be used for testing.\n* `redisHost` - the host used for Redis connections. defaults to `'localhost'`.\n* `redisPort` - the port used for Redis connections. defaults to `6379`.\n* `redisPassword` - set this to your Redis password, if your Redis server requires one.\n* `apiHost` - the host to listen on for the internal API. this should be the same value used in your webapp to connect to iShout.js. defaults to `'localhost'`.\n* `apiPort` - the port to listen on for the internal API. this should be the same value used in your webapp to connect to iShout.js. defaults to `6600`.\n* `socketHost` - the host to listen on for the external socket.IO server. defaults to `'0.0.0.0'` (so it will be available from the \"outside\").\n* `socketPort` - the port to listen on for the external socket.IO server. this should be open in your firewall for traffic coming in from the internet. defaults to `5500`.\n* `sslKey` - path to an optional SSL key file. Add this and `sslCertificate` if you want to serve iShout.js over HTTPS.\n* `sslCertificate` - path to an SSL certificate file. the server will start in SSL mode only if both `sslKey` and `sslCertificate` are provided, and both are valid. else, it will start in regular, unencrypted HTTP. so pay attention.\n* `socketsVolatile` - whether or not to buffer messages when sending to a client. read more about volatile mode [here](https://github.com/LearnBoost/socket.io/wiki/Messaging \"Socket.IO wiki\"). defaults to `false`.\n\n\n\n## Authorization\n\n\nThe iShout.js authorization model works like this:\n\n1. client A makes a request to your webapp.\n2. your webapp turns to iShout.js's internal API and requests a token for that user's ID.\n3. upon receiving the token, the webapp sets a cookie called `iShoutToken` to the value of the token, and renders the requested page back to client A.\n4. the requested page (containing the iShout.js javascript include) uses this cookie to retrieve the token, and validates it against the iShout.js server.\n5. upon successful validation, a connection is established and your client will start listening on channels and events you define.\n\nThese steps are all handled by your framework's iShout.js client. you just need to install ishout,\ninclude the javascript client on your page, and start the iShout.js server.\n\n",
  "readmeFilename": "README.md",
  "_id": "ishout.js@0.1.4",
  "_from": "ishout.js@"
}
